%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void yyerror(const char *s);
int yylex(void);


char** androidIds = NULL;
int numAndroidIds = 0;

extern FILE *yyin;
extern FILE *yyout;
extern int yylex();
extern int yyparse();
extern int yylineno;
extern char *yytext;
extern int yylval;
extern int lines;
extern int id_line;



%}

%token ANDROID_ID
%token ANDROID_LAYOUT_WIDTH
%token ANDROID_LAYOUT_HEIGHT
%token ANDROID_ORIENTATION
%token ANDROID_TEXT
%token ANDROID_TEXTCOLOR
%token ANDROID_SRC
%token ANDROID_PADDING
%token ANDROID_MAX
%token ANDROID_PROGRESS
%token ANDROID_RADIO_GROUP_EXTRA
%token ANDROID_CHECKEDBUTTON

%token LINEAR_LAYOUT_START
%token LINEAR_LAYOUT_STOP
%token RELATIVE_LAYOUT_START
%token RELATIVE_LAYOUT_STOP
%token TEXT_VIEW_START
%token TEXT_VIEW_STOP
%token CLOSE_TEXT_VIEW
%token IMAGE_VIEW_START
%token IMAGE_VIEW_STOP
%token BUTTON_START
%token BUTTON_STOP
%token RADIO_GROUP_START
%token RADIO_GROUP_STOP
%token RADIO_BUTTON_START
%token RADIO_BUTTON_STOP
%token PROGRESS_BAR_START
%token PROGRESS_BAR_STOP
%token CLOSE_LWAGGER
%token NL
%token STRING
%token VALUE
%token INTEGER FLOAT 
%token TRUE FALSE
%token STR
%token LWAGGER
%token INT
%%

layout: LINEAR_LAYOUT_START EOL attributes7  LWAGGER EOL content EOL LINEAR_LAYOUT_STOP  {printf("\n\nCode parsed successfully\n");}
       | RELATIVE_LAYOUT_START EOL attributes8 LWAGGER EOL content EOL RELATIVE_LAYOUT_STOP 
      ;



content: /* empty */ 
       | element 
       | element EOL content
       ;

element: text_view
       | image_view
       | button
       | radio_group
       | progress_bar
       | layout
       ;

content2: /* empty */ 
       | element2 
       | element2 EOL content2  
       ;

element2: text_view
       | image_view
       | button
       | radio_group
       | progress_bar
       | radio_button
       | layout
       ;

text_view: TEXT_VIEW_START EOL attributes1 CLOSE_LWAGGER EOL 
         ;

image_view: IMAGE_VIEW_START EOL attributes2 CLOSE_LWAGGER EOL
          ;

button: RADIO_BUTTON_START attributes3 BUTTON_STOP
       ;

radio_group: RADIO_GROUP_START EOL attributes4 LWAGGER EOL content2 EOL RADIO_GROUP_STOP
            ;

radio_button: RADIO_BUTTON_START EOL attributes5 CLOSE_LWAGGER  EOL
            ;

progress_bar: PROGRESS_BAR_START EOL attributes6 CLOSE_LWAGGER EOL
            ;


attributes1:  /* empty */ 
          | attribute1
          | attribute1 EOL attributes1
          ;

attributes2:  /* empty */ 
          | attribute2 
          | attribute2 EOL attributes2
          ;

attributes3:  /* empty */ 
          | attribute3 
          | attribute3 EOL attributes3
          ;

attributes4:  /* empty */ 
          | attribute4 
          | attribute4 EOL attributes4
          ;

attributes5:  /* empty */ 
          | attribute5 
          | attribute5 EOL attributes5
          ;

attributes6:  /* empty */ 
          | attribute6 
          | attribute6 EOL attributes6
          ;

attributes7:  /* empty */ 
          | attribute7 
          | attribute7 EOL attributes7
          ;

attributes8:  /* empty */ 
          | attribute8 
          | attribute8 EOL attributes8
          ;

attribute1: ANDROID_ID STR
         | ANDROID_TEXT STR
         | ANDROID_TEXTCOLOR STR
         | ANDROID_LAYOUT_WIDTH STR
         | ANDROID_LAYOUT_WIDTH INT
         | ANDROID_LAYOUT_HEIGHT STR
         | ANDROID_LAYOUT_HEIGHT INT
         | ANDROID_ORIENTATION STR
         ;

attribute2: ANDROID_SRC STR
         | ANDROID_ID STR
         | ANDROID_PADDING INT
         | ANDROID_PADDING STR
         | ANDROID_LAYOUT_WIDTH STR
         | ANDROID_LAYOUT_WIDTH INT
         | ANDROID_LAYOUT_HEIGHT STR
         | ANDROID_LAYOUT_HEIGHT INT
         | ANDROID_ORIENTATION STR
         ;

attribute3: ANDROID_TEXT STR
         | ANDROID_ID STR
         | ANDROID_PADDING INT
         | ANDROID_PADDING STR
         | ANDROID_LAYOUT_WIDTH STR
         | ANDROID_LAYOUT_WIDTH INT
         | ANDROID_LAYOUT_HEIGHT STR
         | ANDROID_LAYOUT_HEIGHT INT
         | ANDROID_ORIENTATION STR
         ;

attribute4: ANDROID_TEXT STR
         | ANDROID_ID STR
         | ANDROID_LAYOUT_WIDTH STR
         | ANDROID_LAYOUT_WIDTH INT
         | ANDROID_LAYOUT_HEIGHT STR
         | ANDROID_LAYOUT_HEIGHT INT
         | ANDROID_ORIENTATION STR
         | ANDROID_RADIO_GROUP_EXTRA INT 
                                                 
                                                 
           
         ;

attribute5: ANDROID_TEXT STR
         | ANDROID_ID STR
         | ANDROID_LAYOUT_WIDTH STR
         | ANDROID_LAYOUT_WIDTH INT
         | ANDROID_LAYOUT_HEIGHT STR
         | ANDROID_LAYOUT_HEIGHT INT
         | ANDROID_ORIENTATION STR
         ;

attribute6: ANDROID_ID STR
         | ANDROID_PROGRESS INT 
         | ANDROID_MAX INT 
         | ANDROID_LAYOUT_WIDTH STR
         | ANDROID_LAYOUT_WIDTH INT
         | ANDROID_LAYOUT_HEIGHT STR
         | ANDROID_LAYOUT_HEIGHT INT
         | ANDROID_ORIENTATION STR
         ;

attribute7: ANDROID_ID STR
          | ANDROID_ORIENTATION STR
         | ANDROID_LAYOUT_WIDTH STR
         | ANDROID_LAYOUT_WIDTH INT
         | ANDROID_LAYOUT_HEIGHT STR
         | ANDROID_LAYOUT_HEIGHT INT
         ;


  attribute8: ANDROID_ID STR
         | ANDROID_LAYOUT_WIDTH STR
         | ANDROID_LAYOUT_WIDTH INT
         | ANDROID_LAYOUT_HEIGHT STR
         | ANDROID_LAYOUT_HEIGHT INT
         
         ;       
 



EOL: /* nothing */
   | NL EOL
   ; 


%%

void yyerror(const char *s)
{
	printf("\n\nerror: %s\n ", s);
	printf("\n");
        printf("Line %d: %s\n", yylineno, yytext);
}


int main(int argc, char **argv)
{
	++argv; --argc;
	
	if(argc > 0)
		yyin = fopen(argv[0], "r");
	else
		yyin = stdin;
		
	yyout = stdout;
	
	yyparse();

    for (int i = 0; i < numAndroidIds; i++) {
        free(androidIds[i]);
    }
    free(androidIds);
    
	return 0;
}
__________________flex__________________
%option yylineno
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "bison.tab.h"
void token_print(int token_id);

int lines = 0;
int id_line = 0;

%}


digit		[0-9]
integer		{digit}+
float		{digit}*\.{digit}+
letter		[a-zA-z0-9_ ]*
word		{letter}+
propertyC	{word}[.]{word}

%%
\"[0-9]+\"        				{printf("%s", yytext); yylval = atoi(yytext+1); return INT;}
"<LinearLayout"                 {token_print(LINEAR_LAYOUT_START); return LINEAR_LAYOUT_START; }
"</LinearLayout>"               {token_print(LINEAR_LAYOUT_STOP); return LINEAR_LAYOUT_STOP; }
"<RelativeLayout"               {token_print(RELATIVE_LAYOUT_START); return RELATIVE_LAYOUT_START; }
"</RelativeLayout>"             {token_print(RELATIVE_LAYOUT_STOP); return RELATIVE_LAYOUT_STOP; }
"<TextView"                     {token_print(TEXT_VIEW_START); return TEXT_VIEW_START; }
"</TextView>"                   {token_print(TEXT_VIEW_STOP); return TEXT_VIEW_STOP; }
"<ImageView"                    {token_print(IMAGE_VIEW_START); return IMAGE_VIEW_START; }
"</ImageView>"                  {token_print(IMAGE_VIEW_STOP); return IMAGE_VIEW_STOP; }
"<Button"                       {token_print(BUTTON_START); return BUTTON_START; }
"</Button>"                     {token_print(BUTTON_STOP); return BUTTON_STOP; }
"<RadioGroup"                   {token_print(RADIO_GROUP_START); return RADIO_GROUP_START; }
"</RadioGroup>"                 {token_print(RADIO_GROUP_STOP); return RADIO_GROUP_STOP; }
"<RadioButton"                  {token_print(RADIO_BUTTON_START); return RADIO_BUTTON_START; }
"</RadioButton>"                {token_print(RADIO_BUTTON_STOP); return RADIO_BUTTON_STOP; }
"<ProgressBar"                  {token_print(PROGRESS_BAR_START); return PROGRESS_BAR_START; }
"</ProgressBar>"                {token_print(PROGRESS_BAR_STOP); return PROGRESS_BAR_STOP; }
"android:id="                   {token_print(ANDROID_ID); return ANDROID_ID; }
"android:layout_width=" 		{token_print(ANDROID_LAYOUT_WIDTH); return ANDROID_LAYOUT_WIDTH; }
"android:layout_height=" 		{token_print(ANDROID_LAYOUT_HEIGHT); return ANDROID_LAYOUT_HEIGHT; }
"android:orientation=" 			{token_print(ANDROID_ORIENTATION); return ANDROID_ORIENTATION; }
"android:text=" 				{token_print(ANDROID_TEXT); return ANDROID_TEXT; }
"android:textColor=" 			{token_print(ANDROID_TEXTCOLOR); return ANDROID_TEXTCOLOR; }
"android:src=" 					{token_print(ANDROID_SRC); return ANDROID_SRC; }
"android:padding=" 				{token_print(ANDROID_PADDING); return ANDROID_PADDING; }
"android:max=" 					{token_print(ANDROID_MAX); return ANDROID_MAX; }
"android:progress=" 			{token_print(ANDROID_PROGRESS); return ANDROID_PROGRESS; }
"android:checkedButton=" 		{token_print(ANDROID_CHECKEDBUTTON); return ANDROID_CHECKEDBUTTON; }
"android:radio_group_extra="    {token_print(ANDROID_RADIO_GROUP_EXTRA); return ANDROID_RADIO_GROUP_EXTRA; }
["]{word}["]				    {printf("%s", yytext); return STR;}
">"                             {token_print(LWAGGER); return LWAGGER;}
"/>"                            {token_print(CLOSE_LWAGGER); return CLOSE_LWAGGER;}
["]{integer}["]					{printf("%s", yytext); yylval = atoi(yytext); return INTEGER;}
{float}						    {printf("%s", yytext); return FLOAT;}
true 						    {printf("%s", yytext); return TRUE;}
false						    {printf("%s", yytext); return FALSE;}
[\n]+                           {printf("\n"); lines++; return NL;}  
"<!--"([^<]|"<"[^!])*"-->"   /* Ignore comments */
[\r]+?                          { printf("%s" ,yytext); /*Ignore carriage returns*/}
[ \t]+                          { printf("%s" ,yytext); /*Ignore spaces and tabs*/}
.                               { printf("Invalid token: %s\n", yytext); }

%%

void token_print(int token_id) {
    printf("%s", yytext);
}
