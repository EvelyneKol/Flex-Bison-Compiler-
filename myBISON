%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void yyerror(const char *s);
int yylex(void);

char** androidIds = NULL;
int numAndroidIds = 0;


extern FILE *yyin;
extern FILE *yyout;
extern int yylex();
extern int yyparse();
extern int yylineno;
extern char *yytext;
extern int yylval;
extern int lines;
extern int id_line;
%}


%token android_id
%token android_layout_width
%token android_layout_height
%token android_orientation
%token android_text
%token android_textcolor
%token android_src
%token android_padding
%token android_max
%token android_progress
%token android_radio_group_extra
%token android_checkedButton

%token LINEAR_LAYOUT_START
%token LINEAR_LAYOUT_STOP
%token RELATIVE_LAYOUT_START
%token RELATIVE_LAYOUT_STOP
%token TEXT_VIEW_START
%token TEXT_VIEW_STOP
%token CLOSE_TEXT_VIEW
%token IMAGE_VIEW_START
%token IMAGE_VIEW_STOP
%token BUTTON_START
%token BUTTON_STOP
%token RADIO_GROUP_START
%token RADIO_GROUP_STOP
%token RADIO_BUTTON_START
%token RADIO_BUTTON_STOP
%token PROGRESS_BAR_START
%token PROGRESS_BAR_STOP
%token CLOSE_LWAGGER
%token NL
%token STRING
%token VALUE
%token INTEGER FLOAT 
%token TRUE FALSE
%token STR
%token LWAGGER


%%

layout: LINEAR_LAYOUT_START EOL attributes7  LWAGGER EOL content EOL LINEAR_LAYOUT_STOP  {printf("\n\nCode parsed successfully\n");}
       | RELATIVE_LAYOUT_START EOL attributes8 LWAGGER EOL content EOL RELATIVE_LAYOUT_STOP 
      ;



content: /* empty */ 
       | element 
       | element EOL content
       ;

element: text_view
       | image_view
       | button
       | radio_group
       | progress_bar
       | layout
       ;

content2: /* empty */ 
       | element2 
       | element2 EOL content2  
       ;

element2: text_view
       | image_view
       | button
       | radio_group
       | progress_bar
       | radio_button
       | layout
       ;

text_view: TEXT_VIEW_START EOL attributes1 CLOSE_LWAGGER EOL 
         ;

image_view: IMAGE_VIEW_START EOL attributes2 CLOSE_LWAGGER EOL
          ;

button: BUTTON_START attributes3 BUTTON_STOP
       ;

radio_group: RADIO_GROUP_START EOL attributes4 LWAGGER EOL content2 EOL RADIO_GROUP_STOP
            ;

radio_button: RADIO_BUTTON_START EOL attributes5 CLOSE_LWAGGER  EOL
         ;

progress_bar: PROGRESS_BAR_START EOL attributes6  CLOSE_LWAGGER EOL
             ;


attributes1:  /* empty */ 
          | attribute1
          | attribute1 EOL attributes1
          ;

attributes2:  /* empty */ 
          | attribute2 
          | attribute2 EOL attributes2
          ;

attributes3:  /* empty */ 
          | attribute3 
          | attribute3 EOL attributes3
          ;

attributes4:  /* empty */ 
          | attribute4 
          | attribute4 EOL attributes4
          ;

attributes5:  /* empty */ 
          | attribute5 
          | attribute5 EOL attributes5
          ;

attributes6:  /* empty */ 
          | attribute6 
          | attribute6 EOL attributes6
          ;

attributes7:  /* empty */ 
          | attribute7 
          | attribute7 EOL attributes7
          ;

attributes8:  /* empty */ 
          | attribute8 
          | attribute8 EOL attributes8
          ;


attribute1: android_id STR
{
            // Check for uniqueness
            for (int i = 0; i < numAndroidIds; i++) {
                if (strcmp(yytext, androidIds[i]) == 0) {
                    printf("Error: Duplicate android:id value '%s' at line %d\n", yytext, yylineno);
                    exit(EXIT_FAILURE);
                }
            }

            // Store the encountered android:id value
            androidIds = realloc(androidIds, (numAndroidIds + 1) * sizeof(char*));
            androidIds[numAndroidIds] = strdup(yytext);
            numAndroidIds++;
         }
         | android_text STR
         | android_textcolor STR
         | android_layout_width STR
         | android_layout_width INTEGER
         | android_layout_height STR
         | android_layout_height INTEGER
         | android_orientation STR
         ;

attribute2: android_src STR
         | android_id STR
         {
            // Check for uniqueness
            for (int i = 0; i < numAndroidIds; i++) {
                if (strcmp(yytext, androidIds[i]) == 0) {
                    printf("Error: Duplicate android:id value '%s' at line %d\n", yytext, yylineno);
                    exit(EXIT_FAILURE);
                }
            }

            // Store the encountered android:id value
            androidIds = realloc(androidIds, (numAndroidIds + 1) * sizeof(char*));
            androidIds[numAndroidIds] = strdup(yytext);
            numAndroidIds++;
         }
         | android_padding INTEGER
         | android_padding STR
         | android_layout_width STR
         | android_layout_width INTEGER
         | android_layout_height STR
         | android_layout_height INTEGER
         | android_orientation STR
         ;

attribute3: android_text STR
         | android_id STR
         {
            // Check for uniqueness
            for (int i = 0; i < numAndroidIds; i++) {
                if (strcmp(yytext, androidIds[i]) == 0) {
                    printf("Error: Duplicate android:id value '%s' at line %d\n", yytext, yylineno);
                    exit(EXIT_FAILURE);
                }
            }

            // Store the encountered android:id value
            androidIds = realloc(androidIds, (numAndroidIds + 1) * sizeof(char*));
            androidIds[numAndroidIds] = strdup(yytext);
            numAndroidIds++;
         }
         | android_padding INTEGER
         | android_padding STR
         | android_layout_width STR
         | android_layout_width INTEGER
         | android_layout_height STR
         | android_layout_height INTEGER
         | android_orientation STR
         ;

attribute4: android_text STR
         | android_id STR
         {
            // Check for uniqueness
            for (int i = 0; i < numAndroidIds; i++) {
                if (strcmp(yytext, androidIds[i]) == 0) {
                    printf("Error: Duplicate android:id value '%s' at line %d\n", yytext, yylineno);
                    exit(EXIT_FAILURE);
                }
            }

            // Store the encountered android:id value
            androidIds = realloc(androidIds, (numAndroidIds + 1) * sizeof(char*));
            androidIds[numAndroidIds] = strdup(yytext);
            numAndroidIds++;
         }
         | android_layout_width STR
         | android_layout_width INTEGER
         | android_layout_height STR
         | android_layout_height INTEGER
         | android_orientation STR
         | android_radio_group_extra INTEGER
         ;

attribute5: android_text STR
         | android_id STR
         {
            // Check for uniqueness
            for (int i = 0; i < numAndroidIds; i++) {
                if (strcmp(yytext, androidIds[i]) == 0) {
                    printf("Error: Duplicate android:id value '%s' at line %d\n", yytext, yylineno);
                    exit(EXIT_FAILURE);
                }
            }

            // Store the encountered android:id value
            androidIds = realloc(androidIds, (numAndroidIds + 1) * sizeof(char*));
            androidIds[numAndroidIds] = strdup(yytext);
            numAndroidIds++;
         }
         | android_layout_width STR
         | android_layout_width INTEGER
         | android_layout_height STR
         | android_layout_height INTEGER
         | android_orientation STR
         ;

attribute6: android_id STR
{
            // Check for uniqueness
            for (int i = 0; i < numAndroidIds; i++) {
                if (strcmp(yytext, androidIds[i]) == 0) {
                    printf("Error: Duplicate android:id value '%s' at line %d\n", yytext, yylineno);
                    exit(EXIT_FAILURE);
                }
            }

            // Store the encountered android:id value
            androidIds = realloc(androidIds, (numAndroidIds + 1) * sizeof(char*));
            androidIds[numAndroidIds] = strdup(yytext);
            numAndroidIds++;
         }
         | android_progress INTEGER
         | android_max INTEGER
         | android_layout_width STR
         | android_layout_width INTEGER
         | android_layout_height STR
         | android_layout_height INTEGER
         | android_orientation STR
         ;

attribute7: android_id STR
{
            // Check for uniqueness
            for (int i = 0; i < numAndroidIds; i++) {
                if (strcmp(yytext, androidIds[i]) == 0) {
                    printf("Error: Duplicate android:id value '%s' at line %d\n", yytext, yylineno);
                    exit(EXIT_FAILURE);
                }
            }

            // Store the encountered android:id value
            androidIds = realloc(androidIds, (numAndroidIds + 1) * sizeof(char*));
            androidIds[numAndroidIds] = strdup(yytext);
            numAndroidIds++;
         }
          | android_orientation STR
         | android_layout_width STR
         | android_layout_width INTEGER
         | android_layout_height STR
         | android_layout_height INTEGER
         ;


  attribute8: android_id STR
  {
            // Check for uniqueness
            for (int i = 0; i < numAndroidIds; i++) {
                if (strcmp(yytext, androidIds[i]) == 0) {
                    printf("Error: Duplicate android:id value '%s' at line %d\n", yytext, yylineno);
                    exit(EXIT_FAILURE);
                }
            }

            // Store the encountered android:id value
            androidIds = realloc(androidIds, (numAndroidIds + 1) * sizeof(char*));
            androidIds[numAndroidIds] = strdup(yytext);
            numAndroidIds++;
         }
         | android_layout_width STR
         | android_layout_width INTEGER
         | android_layout_height STR
         | android_layout_height INTEGER
         
         ;       

       



EOL: /* nothing */
   | NL EOL
   ; 


%%

void yyerror(const char *s)
{
	printf("\n\nerror: %s\n ", s);
	printf("\n");
        printf("Line %d: %s\n", yylineno, yytext);
}


int main(int argc, char **argv)
{
	++argv; --argc;
	
	if(argc > 0)
		yyin = fopen(argv[0], "r");
	else
		yyin = stdin;
		
	yyout = stdout;
	
	yyparse();

    for (int i = 0; i < numAndroidIds; i++) {
        free(androidIds[i]);
    }
    free(androidIds);
    
	return 0;
}

