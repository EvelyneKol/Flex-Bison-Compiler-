%option yylineno
%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "bison.tab.h"
void token_print(int token_id);

int lines = 0;
int id_line = 0;
%}


digit		[0-9]
integer		{digit}+
float		{digit}*\.{digit}+
letter		[a-zA-z0-9_ ]*
word		{letter}+
propertyC	{word}[.]{word}

%%

"<LinearLayout"                 {token_print(LINEAR_LAYOUT_START); return LINEAR_LAYOUT_START; }
"</LinearLayout>"               {token_print(LINEAR_LAYOUT_STOP); return LINEAR_LAYOUT_STOP; }
"<RelativeLayout"               {token_print(RELATIVE_LAYOUT_START); return RELATIVE_LAYOUT_START; }
"</RelativeLayout>"             {token_print(RELATIVE_LAYOUT_STOP); return RELATIVE_LAYOUT_STOP; }
"<TextView"                     {token_print(TEXT_VIEW_START); return TEXT_VIEW_START; }
"</TextView>"                   {token_print(TEXT_VIEW_STOP); return TEXT_VIEW_STOP; }
"<ImageView"                    {token_print(IMAGE_VIEW_START); return IMAGE_VIEW_START; }
"</ImageView>"                  {token_print(IMAGE_VIEW_STOP); return IMAGE_VIEW_STOP; }
"<Button"                       {token_print(BUTTON_START); return BUTTON_START; }
"</Button>"                     {token_print(BUTTON_STOP); return BUTTON_STOP; }
"<RadioGroup"                   {token_print(RADIO_GROUP_START); return RADIO_GROUP_START; }
"</RadioGroup>"                 {token_print(RADIO_GROUP_STOP); return RADIO_GROUP_STOP; }
"<RadioButton"                  {token_print(RADIO_BUTTON_START); return RADIO_BUTTON_START; }
"</RadioButton>"                {token_print(RADIO_BUTTON_STOP); return RADIO_BUTTON_STOP; }
"<ProgressBar"                  {token_print(PROGRESS_BAR_START); return PROGRESS_BAR_START; }
"</ProgressBar>"                {token_print(PROGRESS_BAR_STOP); return PROGRESS_BAR_STOP; }
"android:id="                   {token_print(android_id); return android_id; }
"android:layout_width="         {token_print(android_layout_width);return android_layout_width; }
"android:layout_height="        {token_print(android_layout_height); return android_layout_height; }
"android:orientation="          {token_print(android_orientation); return android_orientation; }
"android:text="                 {token_print(android_text); return android_text; }
"android:textColor="            {token_print(android_textcolor); return android_textcolor; }
"android:src="                  {token_print(android_src); return android_src; }
"android:padding="              {token_print(android_padding); return android_padding; }
"android:max="                  {token_print(android_max); return android_max; }
"android:progress="             {token_print(android_progress); return android_progress; }
"android:checkedButton="        {token_print(android_checkedButton); return android_checkedButton; }
"android:radio_group_extra"     {token_print(android_radio_group_extra); return android_radio_group_extra; }
["]{word}["]				    {printf("%s", yytext); return STR;}
">"                             {token_print(LWAGGER); return LWAGGER;}
"/>"                            {token_print(CLOSE_LWAGGER); return CLOSE_LWAGGER;}
["]{integer}["]					{printf("%s", yytext); yylval = atoi(yytext); return INTEGER;}
{float}						    {printf("%s", yytext); return FLOAT;}
true 						    {printf("%s", yytext); return TRUE;}
false						    {printf("%s", yytext); return FALSE;}
[\n]+                           {printf("\n"); lines++; return NL;}  
"<!--"([^<]|"<"[^!])*"-->"   /* Ignore comments */
[\r]+?                          { printf("%s" ,yytext); /*Ignore carriage returns*/}
[ \t]+                          { printf("%s" ,yytext); /*Ignore spaces and tabs*/}
.                               { printf("Invalid token: %s\n", yytext); }

%%

void token_print(int token_id) {
    printf("%s", yytext);
}
